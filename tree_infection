# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from collections import deque 
class Solution:
    def amountOfTime(self, root: Optional[TreeNode], start: int) -> int:
        def bfs(root):
            q = deque([root])
            d = {} 
            while(len(q)>0):
                node = q.popleft() 
                if(node.left):
                    q.append(node.left) 
                    d[node.left] = node 
                if(node.right):
                    q.append(node.right) 
                    d[node.right] = node 
            return d  
        def preorder(root,start):
            if(root == None):
                return None 
            if(root.val == start):
                return root 
            path1 = preorder(root.left,start) 
            if(path1!=None):
                return path1 
            path2 = preorder(root.right,start) 
            return path1 or path2 
        parent = bfs(root) 
        start_address = preorder(root,start)
        vis = set([start_address])  
        q = deque([start_address]) 
        m = 0 
        while(len(q)>0):
            for i in range(len(q)):
                node = q.popleft() 
                # left 
                if(node.left and node.left not in vis):
                    vis.add(node.left) 
                    q.append(node.left) 
                # right 
                if(node.right and node.right not in vis):
                    vis.add(node.right) 
                    q.append(node.right) 
                # parent 
                if(node in parent and parent[node] not in vis):
                    vis.add(parent[node]) 
                    q.append(parent[node]) 
            m+=1 
        return m-1 
